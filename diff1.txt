diff --git a/scripts/northrend/nexus/nexus/boss_anomalus.cpp b/scripts/northrend/nexus/nexus/boss_anomalus.cpp
index 6e9c169..27facb4 100644
--- a/scripts/northrend/nexus/nexus/boss_anomalus.cpp
+++ b/scripts/northrend/nexus/nexus/boss_anomalus.cpp
@@ -1,4 +1,4 @@
-/* Copyright (C) 2006 - 2011 ScriptDev2 <http://www.scriptdev2.com/>
+/* Copyright (C) 2006 - 2011 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
diff --git a/scripts/northrend/nexus/nexus/boss_keristrasza.cpp b/scripts/northrend/nexus/nexus/boss_keristrasza.cpp
index b236122..51cbb63 100644
--- a/scripts/northrend/nexus/nexus/boss_keristrasza.cpp
+++ b/scripts/northrend/nexus/nexus/boss_keristrasza.cpp
@@ -1,4 +1,4 @@
-/* Copyright (C) 2006 - 2011 ScriptDev2 <http://www.scriptdev2.com/>
+/* Copyright (C) 2006 - 2011 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
@@ -175,7 +175,7 @@ struct MANGOS_DLL_DECL boss_keristraszaAI : public ScriptedAI
                 uiTailSweepTimer = urand(2500, 7500);
         }
         else
-            uiCrystalChainTimer -= uiDiff;
+            uiTailSweepTimer  -= uiDiff;
 
         if (uiCrystalfireBreathTimer < uiDiff)
         {
diff --git a/scripts/northrend/nexus/nexus/boss_ormorok.cpp b/scripts/northrend/nexus/nexus/boss_ormorok.cpp
index 016f424..d306f2d 100644
--- a/scripts/northrend/nexus/nexus/boss_ormorok.cpp
+++ b/scripts/northrend/nexus/nexus/boss_ormorok.cpp
@@ -1,4 +1,4 @@
-/* Copyright (C) 2006 - 2011 ScriptDev2 <http://www.scriptdev2.com/>
+/* Copyright (C) 2006 - 2011 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
@@ -16,41 +16,48 @@
 
 /* ScriptData
 SDName: Boss_Ormorok
-SD%Complete: 50%
-SDComment: TODO: Correct timers. Research how spikes work, and attempt code it properly from mangos side.
+SD%Complete: 95%
+SDComment: Playable Normal Heroic Support
 SDCategory: Nexus
 EndScriptData */
 
 #include "precompiled.h"
 #include "nexus.h"
 
-enum
+enum Sounds
 {
-    SAY_AGGRO                   = -1576011,
-    SAY_KILL                    = -1576012,
-    SAY_REFLECT                 = -1576013,
-    SAY_ICESPIKE                = -1576014,
-    SAY_DEATH                   = -1576015,
-    EMOTE_BOSS_GENERIC_FRENZY   = -1000005,
-
-    SPELL_REFLECTION            = 47981,
+    SAY_AGGRO                               = -1576020,
+    SAY_DEATH                               = -1576021,
+    SAY_REFLECT                             = -1576022,
+    SAY_CRYSTAL_SPIKES                      = -1576023,
+    SAY_KILL                                = -1576024
+};
 
-    SPELL_CRYSTAL_SPIKES        = 47958,
-    SPELL_CRYSTAL_SPIKES_H1     = 57082,
-    SPELL_CRYSTAL_SPIKES_H2     = 57083,
+enum
+{
+    SPELL_CRYSTAL_SPIKES_N                     = 47958, //Don't work, using walkaround
+    SPELL_CRYSTAL_SPIKES_H                     = 57082, //Don't work, using walkaround
 
-    SPELL_FRENZY                = 48017,
-    SPELL_FRENZY_H              = 57086,
+    SPELL_CRYSTALL_SPIKE_DAMAGE_N              = 47944,
+    SPELL_CRYSTALL_SPIKE_DAMAGE_H              = 57067,
+    SPELL_CRYSTAL_SPIKE_PREVISUAL              = 50442,
 
-    SPELL_TRAMPLE               = 48016,
-    SPELL_TRAMPLE_H             = 57066,
+    SPELL_SPELL_REFLECTION                     = 35399, //47981,
+    SPELL_TRAMPLE_N                            = 48016,
+    SPELL_TRAMPLE_H                            = 57066,
+    SPELL_FRENZY_H                             = 48017,
+    SPELL_FRENZY_N                             = 57086,
+    SPELL_SUMMON_CRYSTALLINE_TANGLER           = 61564, //summons npc 32665
+    SPELL_ROOTS                                = 28858, //proper spell id is unknown
+};
 
-    SPELL_SUMMON_TANGLER_H      = 61564
+enum Creatures
+{
+    MOB_CRYSTAL_SPIKE                          = 27099,
+    MOB_CRYSTALLINE_TANGLER                    = 32665,
 };
 
-/*######
-## boss_ormorok
-######*/
+#define SPIKE_DISTANCE                            5.0f
 
 struct MANGOS_DLL_DECL boss_ormorokAI : public ScriptedAI
 {
@@ -62,108 +69,213 @@ struct MANGOS_DLL_DECL boss_ormorokAI : public ScriptedAI
     }
 
     ScriptedInstance* m_pInstance;
-    bool m_bIsRegularMode;
 
-    bool m_bIsEnraged;
+    bool m_bIsRegularMode;
+    bool m_bIsFrenzy;
+    bool m_bIsCrystalSpikes;
+    
+    float m_fBaseX;
+    float m_fBaseY;
+    float m_fBaseZ;
+    float m_fBaseO;
+    float m_fSpikeXY[4][2];
 
+    uint32 m_uiSpellCrystalSpikesTimer;
+    uint32 m_uiCrystalSpikesTimer;
     uint32 m_uiTrampleTimer;
-    uint32 m_uiSpellReflectTimer;
-    uint32 m_uiCrystalSpikeTimer;
-    uint32 m_uiTanglerTimer;
+    uint32 m_uiFrenzyTimer;
+    uint32 m_uiReflectionTimer;
+    uint32 m_uiSummonTanglerTimer;
+    uint8  m_uiCrystalSpikesCount;
 
-    void Reset()
+    void Reset() 
     {
-        m_bIsEnraged = false;
-
-        m_uiTrampleTimer = urand(10000, 35000);
-        m_uiSpellReflectTimer = urand(5000, 10000);
-        m_uiCrystalSpikeTimer = urand(15000, 30000);
-        m_uiTanglerTimer = 20000;
+        m_uiSpellCrystalSpikesTimer = 12000;                         
+        m_uiTrampleTimer            = 10000;
+        m_uiReflectionTimer         = 30000;
+        m_uiSummonTanglerTimer      = 17000;
+        m_bIsFrenzy                 = false;
+        m_bIsCrystalSpikes          = false;
     }
 
     void Aggro(Unit* pWho)
     {
         DoScriptText(SAY_AGGRO, m_creature);
+        if(m_pInstance)
+            m_pInstance->SetData(TYPE_ORMOROK, IN_PROGRESS);
     }
 
-    void JustDied(Unit* pKiller)
+    void JustReachedHome()
     {
-        DoScriptText(SAY_DEATH, m_creature);
-
         if (m_pInstance)
-            m_pInstance->SetData(TYPE_ORMOROK, DONE);
+            m_pInstance->SetData(TYPE_ORMOROK, FAIL);
     }
 
-    void KilledUnit(Unit* pVictim)
+    void JustDied(Unit* killer)  
     {
-        if (urand(0, 1))
-            DoScriptText(SAY_KILL, m_creature);
+        DoScriptText(SAY_DEATH, m_creature);
+        if (m_pInstance)
+            m_pInstance->SetData(TYPE_ORMOROK, DONE);
     }
 
-    void JustSummoned(Creature* pSummoned)
+    void KilledUnit(Unit *victim)
     {
-        if (Unit* pTarget = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 1))
-            pSummoned->AI()->AttackStart(pTarget);
+        DoScriptText(SAY_KILL, m_creature);
     }
 
-    void UpdateAI(const uint32 uiDiff)
+    void UpdateAI(const uint32 diff) 
     {
         if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
             return;
 
-        if (!m_bIsEnraged && m_creature->GetHealthPercent() < 25.0f)
-        {
-            if (!m_creature->IsNonMeleeSpellCasted(false))
+        if (m_bIsCrystalSpikes)
+            if (m_uiCrystalSpikesTimer < diff)
             {
-                m_bIsEnraged = true;
-                DoScriptText(EMOTE_BOSS_GENERIC_FRENZY, m_creature);
-                DoCastSpellIfCan(m_creature, m_bIsRegularMode ? SPELL_FRENZY : SPELL_FRENZY_H);
+                m_fSpikeXY[0][0] = m_fBaseX+(SPIKE_DISTANCE*m_uiCrystalSpikesCount*cos(m_fBaseO));
+                m_fSpikeXY[0][1] = m_fBaseY+(SPIKE_DISTANCE*m_uiCrystalSpikesCount*sin(m_fBaseO));
+                m_fSpikeXY[1][0] = m_fBaseX-(SPIKE_DISTANCE*m_uiCrystalSpikesCount*cos(m_fBaseO));
+                m_fSpikeXY[1][1] = m_fBaseY-(SPIKE_DISTANCE*m_uiCrystalSpikesCount*sin(m_fBaseO));
+                m_fSpikeXY[2][0] = m_fBaseX+(SPIKE_DISTANCE*m_uiCrystalSpikesCount*cos(m_fBaseO-(M_PI/2)));
+                m_fSpikeXY[2][1] = m_fBaseY+(SPIKE_DISTANCE*m_uiCrystalSpikesCount*sin(m_fBaseO-(M_PI/2)));
+                m_fSpikeXY[3][0] = m_fBaseX-(SPIKE_DISTANCE*m_uiCrystalSpikesCount*cos(m_fBaseO-(M_PI/2)));
+                m_fSpikeXY[3][1] = m_fBaseY-(SPIKE_DISTANCE*m_uiCrystalSpikesCount*sin(m_fBaseO-(M_PI/2)));
+                for (uint8 i = 0; i < 4; i++)
+                    Creature* Spike = m_creature->SummonCreature(MOB_CRYSTAL_SPIKE, m_fSpikeXY[i][0], m_fSpikeXY[i][1], m_fBaseZ, 0, TEMPSUMMON_TIMED_DESPAWN, 7000);
+                if (++m_uiCrystalSpikesCount >= 13)
+                    m_bIsCrystalSpikes = false;
+                m_uiCrystalSpikesTimer = 200;
             }
+            else
+                m_uiCrystalSpikesTimer -= diff;
+
+        if (!m_bIsFrenzy && (m_creature->GetHealthPercent() < 25.0f))
+        {
+            DoCast(m_creature, m_bIsRegularMode ? SPELL_FRENZY_N : SPELL_FRENZY_H);
+            m_bIsFrenzy = true;
         }
 
-        if (m_uiTrampleTimer < uiDiff)
+        if (m_uiTrampleTimer < diff)
         {
-            DoCastSpellIfCan(m_creature, m_bIsRegularMode ? SPELL_TRAMPLE : SPELL_TRAMPLE_H);
+            DoCastSpellIfCan(m_creature, m_bIsRegularMode ? SPELL_TRAMPLE_N : SPELL_TRAMPLE_H);
             m_uiTrampleTimer = urand(10000, 35000);
         }
         else
-            m_uiTrampleTimer -= uiDiff;
+            m_uiTrampleTimer -= diff;
 
-        if (m_uiSpellReflectTimer < uiDiff)
+        if (m_uiReflectionTimer < diff)
         {
-            DoCastSpellIfCan(m_creature, SPELL_REFLECTION);
-            m_uiSpellReflectTimer = urand(25000, 40000);
+            DoScriptText(SAY_REFLECT, m_creature);
+            DoCast(m_creature, SPELL_SPELL_REFLECTION);
+            m_uiReflectionTimer = 15000;
         }
         else
-            m_uiSpellReflectTimer -= uiDiff;
+            m_uiReflectionTimer -= diff;
 
-        if (m_uiCrystalSpikeTimer < uiDiff)
+        if (m_uiSpellCrystalSpikesTimer < diff)
         {
-            DoScriptText(SAY_ICESPIKE, m_creature);
-            DoCastSpellIfCan(m_creature, SPELL_CRYSTAL_SPIKES);
-            m_uiCrystalSpikeTimer = urand(15000, 30000);
+            DoScriptText(SAY_CRYSTAL_SPIKES, m_creature);
+            m_bIsCrystalSpikes = true;
+            m_uiCrystalSpikesCount = 1;
+            m_uiCrystalSpikesTimer = 0;
+            m_fBaseX = m_creature->GetPositionX();
+            m_fBaseY = m_creature->GetPositionY();
+            m_fBaseZ = m_creature->GetPositionZ();
+            m_fBaseO = m_creature->GetOrientation();
+            m_uiSpellCrystalSpikesTimer = 20000;
         }
         else
-            m_uiCrystalSpikeTimer -= uiDiff;
+            m_uiSpellCrystalSpikesTimer -=diff;
 
-        if (!m_bIsRegularMode)
+        if (!m_bIsRegularMode && (m_uiSummonTanglerTimer < diff))
         {
-            if (m_uiTanglerTimer < uiDiff)
-            {
-                DoCastSpellIfCan(m_creature, SPELL_SUMMON_TANGLER_H);
-                m_uiTanglerTimer = urand(15000, 25000);
-            }
-            else
-                m_uiTanglerTimer -= uiDiff;
+            Creature* CrystallineTangler = m_creature->SummonCreature(MOB_CRYSTALLINE_TANGLER, m_creature->GetPositionX(), m_creature->GetPositionY(), m_creature->GetPositionZ(), m_creature->GetOrientation(), TEMPSUMMON_TIMED_DESPAWN_OUT_OF_COMBAT, 10000);
+            if (CrystallineTangler && CrystallineTangler->AI())
+                if(Unit* pTarget = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM,0))
+                    CrystallineTangler->AI()->AttackStart(pTarget);
+
+            m_uiSummonTanglerTimer = 17000;
         }
+        else
+            m_uiSummonTanglerTimer -=diff;
 
-        DoMeleeAttackIfReady();
+        DoMeleeAttackIfReady();    
     }
 };
 
-CreatureAI* GetAI_boss_ormorok(Creature* pCreature)
+struct MANGOS_DLL_DECL mob_crystal_spikeAI : public Scripted_NoMovementAI
 {
-    return new boss_ormorokAI(pCreature);
+    mob_crystal_spikeAI(Creature *pCreature) : Scripted_NoMovementAI(pCreature)
+    {
+        Reset();
+        m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();
+    }
+
+    bool m_bIsRegularMode;
+
+    uint32 m_uiCrystallSpikeDamageTimer;
+    uint32 m_uiCrystalSpikePreVisualTimer;
+
+    void Reset()
+    {
+        m_uiCrystallSpikeDamageTimer   = 3700;
+        m_uiCrystalSpikePreVisualTimer = 1000;
+        m_creature->SetLevel(80);                                        //
+        m_creature->setFaction(16);                                      //Walkaround to be independent from data in DB
+        m_creature->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE); //
+        m_creature->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE); //
+    }
+
+    void UpdateAI(const uint32 diff) 
+    {
+        if (m_uiCrystalSpikePreVisualTimer < diff)
+        {
+            DoCast(m_creature, SPELL_CRYSTAL_SPIKE_PREVISUAL);
+            m_uiCrystalSpikePreVisualTimer = 10000;
+        }else m_uiCrystalSpikePreVisualTimer -=diff;
+
+        if (m_uiCrystallSpikeDamageTimer < diff)
+        {
+            DoCast(m_creature, m_bIsRegularMode ? SPELL_CRYSTALL_SPIKE_DAMAGE_N : SPELL_CRYSTALL_SPIKE_DAMAGE_H);
+            m_uiCrystallSpikeDamageTimer = 10000;
+        }else m_uiCrystallSpikeDamageTimer -=diff;
+    } 
+}; 
+
+struct MANGOS_DLL_DECL mob_crystalline_tanglerAI : public ScriptedAI
+{
+    mob_crystalline_tanglerAI(Creature *pCreature) : ScriptedAI(pCreature) {Reset();}
+
+    uint32 SPELL_ROOTS_Timer;
+
+    void Reset() {SPELL_ROOTS_Timer = 1000;}
+
+    void UpdateAI(const uint32 diff) 
+    {
+        if (SPELL_ROOTS_Timer < diff)
+        {
+            if(Unit* pTarget = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM,0))
+                DoCastSpellIfCan(pTarget, SPELL_ROOTS, CAST_TRIGGERED);
+            SPELL_ROOTS_Timer = 15000;
+        }
+        else
+            SPELL_ROOTS_Timer -= diff;
+        DoMeleeAttackIfReady();   
+    } 
+}; 
+
+CreatureAI* GetAI_mob_crystal_spike(Creature *_Creature)
+{
+    return new mob_crystal_spikeAI (_Creature);
+}
+
+CreatureAI* GetAI_mob_crystalline_tangler(Creature *_Creature)
+{
+    return new mob_crystalline_tanglerAI (_Creature);
+}
+
+CreatureAI* GetAI_boss_ormorok(Creature *_Creature)
+{
+    return new boss_ormorokAI (_Creature);
 }
 
 void AddSC_boss_ormorok()
@@ -171,7 +283,17 @@ void AddSC_boss_ormorok()
     Script *newscript;
 
     newscript = new Script;
-    newscript->Name = "boss_ormorok";
-    newscript->GetAI = &GetAI_boss_ormorok;
+    newscript->Name="boss_ormorok";
+    newscript->GetAI = GetAI_boss_ormorok;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name="mob_crystal_spike";
+    newscript->GetAI = &GetAI_mob_crystal_spike;
+    newscript->RegisterSelf();
+
+    newscript = new Script;
+    newscript->Name="mob_crystalline_tangler";
+    newscript->GetAI = &GetAI_mob_crystalline_tangler;
     newscript->RegisterSelf();
 }
diff --git a/scripts/northrend/nexus/nexus/boss_telestra.cpp b/scripts/northrend/nexus/nexus/boss_telestra.cpp
index a41914b..5ac2cc2 100644
--- a/scripts/northrend/nexus/nexus/boss_telestra.cpp
+++ b/scripts/northrend/nexus/nexus/boss_telestra.cpp
@@ -1,4 +1,4 @@
-/* Copyright (C) 2006 - 2011 ScriptDev2 <http://www.scriptdev2.com/>
+/* Copyright (C) 2006 - 2011 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
@@ -17,7 +17,10 @@
 /* ScriptData
 SDName: Boss_Telestra
 SD%Complete: 80%
-SDComment: script depend on database spell support and eventAi for clones. transition to phase 2 also not fully implemented
+SDComment: 
+* script depend on database spell support and eventAi for clones. transition to phase 2 also not fully implemented
+* hacked unitfalgs and equipment slots
+* hacked spell gravity well - MaNGOS does not support effect #145
 SDCategory: Nexus
 EndScriptData */
 
@@ -51,7 +54,7 @@ enum
     SPELL_SUMMON_ARCANE     = 47708,
     SPELL_SUMMON_FROST      = 47709,
 
-    SPELL_FIRE_DIES         = 47711,                        // cast by clones at their death
+    SPELL_FIRE_DIES         = 47711,
     SPELL_ARCANE_DIES       = 47713,
     SPELL_FROST_DIES        = 47712,
 
@@ -61,10 +64,8 @@ enum
     NPC_TELEST_ARCANE       = 26929,
     NPC_TELEST_FROST        = 26930,
 
-    PHASE_1                 = 1,
-    PHASE_2                 = 2,
-    PHASE_3                 = 3,
-    PHASE_4                 = 4
+    PHASE_ATTACKING         = 1,
+    PHASE_HIDDEN            = 2
 };
 
 /*######
@@ -92,17 +93,20 @@ struct MANGOS_DLL_DECL boss_telestraAI : public ScriptedAI
 
     void Reset()
     {
-        m_uiPhase = PHASE_1;
+        m_uiPhase = PHASE_ATTACKING;
         m_uiCloneDeadCount = 0;
 
         m_uiFirebombTimer = urand(2000, 4000);
         m_uiIceNovaTimer = urand(8000, 12000);
         m_uiGravityWellTimer = urand(15000, 25000);
+        SetEquipmentSlots(true);
+        m_creature->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
     }
 
     void JustReachedHome()
     {
-        m_creature->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+        if (m_pInstance)
+            m_pInstance->SetData(TYPE_TELESTRA, FAIL);
     }
 
     void AttackStart(Unit* pWho)
@@ -120,6 +124,8 @@ struct MANGOS_DLL_DECL boss_telestraAI : public ScriptedAI
     void Aggro(Unit* pWho)
     {
         DoScriptText(SAY_AGGRO, m_creature);
+        if (m_pInstance)
+            m_pInstance->SetData(TYPE_TELESTRA, IN_PROGRESS);
     }
 
     void JustDied(Unit* pKiller)
@@ -138,9 +144,11 @@ struct MANGOS_DLL_DECL boss_telestraAI : public ScriptedAI
 
     void SpellHit(Unit* pCaster, const SpellEntry *pSpell)
     {
+        if (m_pInstance && m_pInstance->GetData(TYPE_TELESTRA) != IN_PROGRESS)
+            return;
+
         switch(pSpell->Id)
         {
-            // eventAi must make sure clones cast spells when each of them die
             case SPELL_FIRE_DIES:
             case SPELL_ARCANE_DIES:
             case SPELL_FROST_DIES:
@@ -149,20 +157,16 @@ struct MANGOS_DLL_DECL boss_telestraAI : public ScriptedAI
 
                 if (m_uiCloneDeadCount == 3 || m_uiCloneDeadCount == 6)
                 {
+                    m_creature->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
                     m_creature->RemoveAurasDueToSpell(SPELL_SUMMON_CLONES);
-                    m_creature->CastSpell(m_creature, SPELL_SPAWN_BACK_IN, false);
-
-                    m_creature->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+                    DoCastSpellIfCan(m_creature, SPELL_SPAWN_BACK_IN);
 
                     DoScriptText(SAY_MERGE, m_creature);
 
-                    m_uiPhase = m_uiCloneDeadCount == 3 ? PHASE_3 : PHASE_4;
+                    m_uiPhase = PHASE_ATTACKING;
                 }
                 break;
             }
-            case SPELL_SUMMON_CLONES:
-                m_creature->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
-                break;
         }
     }
 
@@ -174,6 +178,10 @@ struct MANGOS_DLL_DECL boss_telestraAI : public ScriptedAI
             case NPC_TELEST_ARCANE: pSummoned->CastSpell(pSummoned, SPELL_ARCANE_VISUAL, true); break;
             case NPC_TELEST_FROST: pSummoned->CastSpell(pSummoned, SPELL_FROST_VISUAL, true); break;
         }
+
+        if (Unit* pTarget = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM,0))
+            if (pSummoned->AI() && pTarget->isInAccessablePlaceFor(pSummoned) && pSummoned->IsHostileTo(pTarget))
+                pSummoned->AI()->AttackStart(pTarget);
     }
 
     void UpdateAI(const uint32 uiDiff)
@@ -183,16 +191,19 @@ struct MANGOS_DLL_DECL boss_telestraAI : public ScriptedAI
 
         switch(m_uiPhase)
         {
-            case PHASE_1:
-            case PHASE_3:
-            case PHASE_4:
+            case PHASE_ATTACKING:
             {
                 if (!m_creature->GetCurrentSpell(CURRENT_CHANNELED_SPELL))
                 {
                     if (m_uiFirebombTimer < uiDiff)
                     {
-                        if (DoCastSpellIfCan(m_creature->getVictim(), m_bIsRegularMode ? SPELL_FIREBOMB : SPELL_FIREBOMB_H) == CAST_OK)
-                            m_uiFirebombTimer = urand(4000, 6000);
+                        if (Unit* pTarget = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM,0))
+                        {
+                            float x, y, z;
+                            pTarget->GetPosition(x, y, z);
+                            m_creature->CastSpell(x, y, z, m_bIsRegularMode ? SPELL_FIREBOMB : SPELL_FIREBOMB_H, false);
+                        }
+                        m_uiFirebombTimer = urand(4000, 6000);
                     }
                     else
                         m_uiFirebombTimer -= uiDiff;
@@ -205,38 +216,43 @@ struct MANGOS_DLL_DECL boss_telestraAI : public ScriptedAI
                     else
                         m_uiIceNovaTimer -= uiDiff;
 
-                    if (m_uiPhase == PHASE_1 && m_creature->GetHealthPercent() < 50.0f)
+                    if ( (m_uiCloneDeadCount == 0 && m_creature->GetHealthPercent() < 50.0f) || 
+                        (!m_bIsRegularMode && m_uiCloneDeadCount == 3 && m_creature->GetHealthPercent() < 15.0f) )
                     {
                         if (DoCastSpellIfCan(m_creature, SPELL_SUMMON_CLONES, CAST_INTERRUPT_PREVIOUS) == CAST_OK)
                         {
+                            m_creature->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+                            SetEquipmentSlots(false, EQUIP_UNEQUIP, EQUIP_UNEQUIP, EQUIP_UNEQUIP);
                             DoScriptText(urand(0, 1) ? SAY_SPLIT_1 : SAY_SPLIT_2, m_creature);
-                            m_uiPhase = PHASE_2;
+                            m_uiPhase = PHASE_HIDDEN;
                         }
                     }
-
-                    if (m_uiPhase == PHASE_3 && !m_bIsRegularMode && m_creature->GetHealthPercent() < 15.0f)
-                    {
-                        if (DoCastSpellIfCan(m_creature, SPELL_SUMMON_CLONES, CAST_INTERRUPT_PREVIOUS) == CAST_OK)
-                        {
-                            DoScriptText(urand(0, 1) ? SAY_SPLIT_1 : SAY_SPLIT_2, m_creature);
-                            m_uiPhase = PHASE_2;
-                        }
-                    }
-
                     DoMeleeAttackIfReady();
                 }
 
                 if (m_uiGravityWellTimer < uiDiff)
                 {
                     if (DoCastSpellIfCan(m_creature, SPELL_GRAVITY_WELL) == CAST_OK)
-                        m_uiGravityWellTimer = urand(15000, 30000);
+                    {
+                        ThreatList const& tList = m_creature->getThreatManager().getThreatList();
+                        if (!tList.empty())
+                        {
+                            for (ThreatList::const_iterator itr = tList.begin(); itr != tList.end(); ++itr)
+                            {
+                                Unit* pUnit = m_creature->GetMap()->GetUnit((*itr)->getUnitGuid());
+                                if (pUnit && pUnit->IsInRange(m_creature, 0.0f, 60.0f))
+                                    pUnit->KnockBackFrom(m_creature, -20.0f, 20.0f);
+                            }
+                        }
+                    }
+                    m_uiGravityWellTimer = urand(15000, 30000);
                 }
                 else
                     m_uiGravityWellTimer -= uiDiff;
 
                 break;
             }
-            case PHASE_2:
+            case PHASE_HIDDEN:
             {
                 break;
             }
diff --git a/scripts/northrend/nexus/nexus/instance_nexus.cpp b/scripts/northrend/nexus/nexus/instance_nexus.cpp
index 6976b5a..d1b1268 100644
--- a/scripts/northrend/nexus/nexus/instance_nexus.cpp
+++ b/scripts/northrend/nexus/nexus/instance_nexus.cpp
@@ -1,4 +1,4 @@
-/* Copyright (C) 2006 - 2011 ScriptDev2 <http://www.scriptdev2.com/>
+/* Copyright (C) 2006 - 2011 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
@@ -188,7 +188,10 @@ struct MANGOS_DLL_DECL instance_nexus : public ScriptedInstance
             if (Creature* pCreature = instance->GetCreature(m_uiKeristrazaGUID))
             {
                 if (pCreature->isAlive())
+                {
                     pCreature->RemoveAurasDueToSpell(SPELL_FROZEN_PRISON);
+                    pCreature->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_OOC_NOT_ATTACKABLE);
+                }
             }
         }
 
@@ -250,6 +253,6 @@ void AddSC_instance_nexus()
 
     newscript = new Script;
     newscript->Name = "go_containment_sphere";
-    newscript->pGOUse = &GOUse_go_containment_sphere;
+    newscript->pGOUse= &GOUse_go_containment_sphere;
     newscript->RegisterSelf();
 }
diff --git a/scripts/northrend/nexus/nexus/nexus.h b/scripts/northrend/nexus/nexus/nexus.h
index 35876a5..3a7d546 100644
--- a/scripts/northrend/nexus/nexus/nexus.h
+++ b/scripts/northrend/nexus/nexus/nexus.h
@@ -1,4 +1,4 @@
-/* Copyright (C) 2006 - 2011 ScriptDev2 <http://www.scriptdev2.com/>
+/* Copyright (C) 2006 - 2011 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>
  * This program is free software licensed under GPL version 2
  * Please see the included DOCS/LICENSE.TXT for more information */
 
